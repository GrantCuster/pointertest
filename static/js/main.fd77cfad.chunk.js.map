{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","touches","pointer","setPointer","handleSet","key","value","p","Object","assign","useEffect","pointerDown","e","slice","includes","pointerId","push","id","x","Math","round","clientX","y","clientY","pointerMove","idx","map","o","indexOf","pointerUp","splice","document","addEventListener","removeEventListener","style","userSelect","keys","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wMAoEeA,MAjEf,WACE,MAA4BC,mBAAS,CACnCC,QAAS,KADX,mBAAKC,EAAL,KAAcC,EAAd,KAUA,SAASC,EAAUC,EAAKC,GACtB,IAAIC,EAAIC,OAAOC,OAAO,GAAIP,GAC1BK,EAAEF,GAAOC,EACTH,EAAWI,GAwCb,OArCAG,qBAAU,WACR,SAASC,EAAYC,GACnB,IAAIX,EAAUC,EAAQD,QAAQY,QACzBZ,EAAQa,SAASF,EAAEG,YACtBd,EAAQe,KAAK,CACXC,GAAIL,EAAEG,UACNG,EAAGC,KAAKC,MAAMR,EAAES,SAChBC,EAAGH,KAAKC,MAAMR,EAAEW,WAEpBnB,EAAU,UAAWH,GAEvB,SAASuB,EAAYZ,GACnB,IAAIX,EAAUC,EAAQD,QAAQY,QAC1BY,EAAMxB,EAAQyB,KAAI,SAACC,GAAD,OAAOA,EAAEV,MAAIW,QAAQhB,EAAEG,WACzCU,GAAO,IACTxB,EAAQwB,GAAKP,EAAIC,KAAKC,MAAMR,EAAES,SAC9BpB,EAAQwB,GAAKH,EAAIH,KAAKC,MAAMR,EAAEW,UAEhCnB,EAAU,UAAWH,GAEvB,SAAS4B,EAAUjB,GACjB,IAAIX,EAAUC,EAAQD,QAAQY,QAC1BY,EAAMxB,EAAQyB,KAAI,SAACC,GAAD,OAAOA,EAAEV,MAAIW,QAAQhB,EAAEG,WAC7Cd,EAAQ6B,OAAOL,EAAK,GACpBrB,EAAU,UAAWH,GAMvB,OAHA8B,SAASC,iBAAiB,cAAeR,GACzCO,SAASC,iBAAiB,cAAerB,GACzCoB,SAASC,iBAAiB,YAAaH,GAChC,WACLE,SAASE,oBAAoB,cAAeT,GAC5CO,SAASE,oBAAoB,cAAetB,GAC5CoB,SAASE,oBAAoB,YAAaJ,MAE3C,CAAC3B,IAGF,qBAAKe,GAAG,MAAMiB,MAAO,CAAEC,WAAY,QAAnC,SACG3B,OAAO4B,KAAKlC,GAASwB,KAAI,SAACrB,GAAD,OACxB,gCACGA,EADH,IACSgC,KAAKC,UAAUpC,EAAQG,aCjDzBkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BZ,K","file":"static/js/main.fd77cfad.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  let [pointer, setPointer] = useState({\n    touches: [],\n  });\n\n  function getPosition(e) {\n    var x = e.clientX;\n    var y = e.clientY;\n    return [x, y];\n  }\n\n  function handleSet(key, value) {\n    let p = Object.assign({}, pointer);\n    p[key] = value;\n    setPointer(p);\n  }\n\n  useEffect(() => {\n    function pointerDown(e) {\n      let touches = pointer.touches.slice();\n      if (!touches.includes(e.pointerId))\n        touches.push({\n          id: e.pointerId,\n          x: Math.round(e.clientX),\n          y: Math.round(e.clientY),\n        });\n      handleSet(\"touches\", touches);\n    }\n    function pointerMove(e) {\n      let touches = pointer.touches.slice();\n      let idx = touches.map((o) => o.id).indexOf(e.pointerId);\n      if (idx >= 0) {\n        touches[idx].x = Math.round(e.clientX);\n        touches[idx].y = Math.round(e.clientY);\n      }\n      handleSet(\"touches\", touches);\n    }\n    function pointerUp(e) {\n      let touches = pointer.touches.slice();\n      let idx = touches.map((o) => o.id).indexOf(e.pointerId);\n      touches.splice(idx, 1);\n      handleSet(\"touches\", touches);\n    }\n\n    document.addEventListener(\"pointermove\", pointerMove);\n    document.addEventListener(\"pointerdown\", pointerDown);\n    document.addEventListener(\"pointerup\", pointerUp);\n    return () => {\n      document.removeEventListener(\"pointermove\", pointerMove);\n      document.removeEventListener(\"pointerdown\", pointerDown);\n      document.removeEventListener(\"pointerup\", pointerUp);\n    };\n  }, [pointer]);\n\n  return (\n    <div id=\"App\" style={{ userSelect: \"none\" }}>\n      {Object.keys(pointer).map((key) => (\n        <div>\n          {key} {JSON.stringify(pointer[key])}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}